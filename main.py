import logging
import os
import asyncio
import datetime
import pytz
from threading import Thread

from flask import Flask
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes

import yfinance as yf
import pandas as pd
import ta
import mplfinance as mpf

# --- Flask –¥–ª—è –ø—ñ–Ω–≥—É ---
app_web = Flask('')

@app_web.route('/')
def home():
    return "–ë–æ—Ç –ø—Ä–∞—Ü—é—î"

def run():
    app_web.run(host='0.0.0.0', port=8080)

Thread(target=run).start()

# --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ---
TOKEN = os.getenv("BOT_TOKEN", "8091244631:AAHZRqn2bY3Ow2zH2WNk0J92mar6D0MgfLw")

logging.basicConfig(level=logging.INFO)
user_settings = {}
history = []

available_pairs = [
    "EURUSD", "GBPUSD", "USDJPY", "AUDUSD", "USDCHF", "EURJPY",
    "GBPJPY", "EURGBP", "NZDUSD", "USDCAD"
]
timeframes = {
    "1m": "1m",
    "3m": "3m",
    "5m": "5m"
}

kyiv_tz = pytz.timezone("Europe/Kiev")

# --- –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö ---
async def fetch_data_async(ticker, interval):
    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ period="1d" - —â–æ–± –±—É–ª–æ –¥–æ—Å—Ç–∞—Ç–Ω—å–æ —Å–≤—ñ—á–æ–∫
    return await asyncio.to_thread(ticker.history, period="1d", interval=interval)

# --- –ê–Ω–∞–ª—ñ–∑ —Å–∏–≥–Ω–∞–ª—É ---
def analyze_signal(data):
    if data.empty or len(data) < 20:
        return None

    close = data['Close']
    rsi = ta.momentum.RSIIndicator(close, window=14).rsi()
    ema = ta.trend.EMAIndicator(close, window=9).ema_indicator()
    macd = ta.trend.MACD(close)
    stoch = ta.momentum.StochasticOscillator(data['High'], data['Low'], close, window=14, smooth_window=3)
    bb = ta.volatility.BollingerBands(close, window=20, window_dev=2)

    current_price = close.iloc[-1]
    current_rsi = rsi.iloc[-1]
    current_ema = ema.iloc[-1]
    current_macd = macd.macd().iloc[-1]
    current_macd_signal = macd.macd_signal().iloc[-1]
    current_stoch_k = stoch.stoch().iloc[-1]
    current_stoch_d = stoch.stoch_signal().iloc[-1]
    current_upper = bb.bollinger_hband().iloc[-1]
    current_lower = bb.bollinger_lband().iloc[-1]

    # –ü—Ä–æ—Å—Ç–∏–π —Å–∏–≥–Ω–∞–ª: –∫—É–ø–∏—Ç–∏ –∞–±–æ –ø—Ä–æ–¥–∞—Ç–∏
    signal = None
    if current_rsi < 30 and current_price < current_lower and current_price > current_ema:
        signal = "–ö—É–ø–∏—Ç–∏"
    elif current_rsi > 70 and current_price > current_upper and current_price < current_ema:
        signal = "–ü—Ä–æ–¥–∞—Ç–∏"

    return {
        "signal": signal,
        "rsi": current_rsi,
        "ema": current_ema,
        "macd": current_macd,
        "macd_signal": current_macd_signal,
        "stoch_k": current_stoch_k,
        "stoch_d": current_stoch_d,
        "bb_upper": current_upper,
        "bb_lower": current_lower,
        "price": current_price
    }

# --- –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Å–≤—ñ—á–∫–æ–≤–æ–≥–æ –≥—Ä–∞—Ñ—ñ–∫–∞ ---
def generate_candlestick_chart(data, pair, tf):
    data = data.copy()
    data.index.name = "Date"
    data = data[['Open', 'High', 'Low', 'Close', 'Volume']]
    filename = f"{pair}_{tf}_candlestick.png"

    mpf.plot(
        data,
        type='candle',
        style='charles',
        title=f"{pair} ({tf})",
        ylabel='Price',
        savefig=filename,
        volume=True,
        tight_layout=True
    )
    return filename

# --- –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —á–∞—Å—É –¥–æ –≤—Ö–æ–¥—É –≤ —É–≥–æ–¥—É (5 —Ö–≤) ---
def get_entry_deadline():
    now = datetime.datetime.now(kyiv_tz)
    deadline = now + datetime.timedelta(minutes=5)
    return deadline.strftime("%H:%M")

# --- –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /start ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–í–∏–ø–∞–¥–∫–æ–≤–∞ –ø–∞—Ä–∞", callback_data="random_pair")],
        [InlineKeyboardButton("–û–±—Ä–∞—Ç–∏ –ø–∞—Ä—É", callback_data="choose_pair")],
        [InlineKeyboardButton("–Ü—Å—Ç–æ—Ä—ñ—è", callback_data="history")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:", reply_markup=reply_markup)

# --- –û–±—Ä–æ–±–∫–∞ callback ---
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    await query.answer()

    # –í–∏–ø–∞–¥–∫–æ–≤–∞ –ø–∞—Ä–∞
    if query.data == "random_pair":
        import random
        pair = random.choice(available_pairs)
        user_settings[user_id] = {"pair": pair}
        keyboard = [[InlineKeyboardButton(tf, callback_data=f"tf_{tf}")] for tf in timeframes]
        await query.edit_message_text(f"–í–∏–ø–∞–¥–∫–æ–≤–∞ –ø–∞—Ä–∞: {pair}\n–û–±–µ—Ä—ñ—Ç—å —Ç–∞–π–º—Ñ—Ä–µ–π–º:", reply_markup=InlineKeyboardMarkup(keyboard))
        return

    # –í–∏–±—Ä–∞—Ç–∏ –ø–∞—Ä—É
    if query.data == "choose_pair":
        keyboard = [[InlineKeyboardButton(pair, callback_data=f"pair_{pair}")] for pair in available_pairs]
        await query.edit_message_text("–û–±–µ—Ä—ñ—Ç—å –≤–∞–ª—é—Ç–Ω—É –ø–∞—Ä—É:", reply_markup=InlineKeyboardMarkup(keyboard))
        return

    # –Ü—Å—Ç–æ—Ä—ñ—è
    if query.data == "history":
        if not history:
            await query.edit_message_text("–Ü—Å—Ç–æ—Ä—ñ—è –ø–æ—Ä–æ–∂–Ω—è.")
            return
        msg = "üìú –Ü—Å—Ç–æ—Ä—ñ—è –æ—Å—Ç–∞–Ω–Ω—ñ—Ö —Å–∏–≥–Ω–∞–ª—ñ–≤:\n\n"
        for h in history[-10:]:
            msg += f"{h['timestamp']} | {h['pair']} ({h['tf']}) ‚Äî {h['signal']}\n"
        await query.edit_message_text(msg)
        return

    # –û–±—Ä–∞—Ç–∏ –ø–∞—Ä—É
    if query.data.startswith("pair_"):
        pair = query.data.split("_")[1]
        user_settings[user_id] = {"pair": pair}
        keyboard = [[InlineKeyboardButton(tf, callback_data=f"tf_{tf}")] for tf in timeframes]
        await query.edit_message_text(f"–û–±–µ—Ä—ñ—Ç—å —Ç–∞–π–º—Ñ—Ä–µ–π–º –¥–ª—è {pair}:", reply_markup=InlineKeyboardMarkup(keyboard))
        return

    # –û–±—Ä–∞—Ç–∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º
    if query.data.startswith("tf_"):
        tf = query.data.split("_")[1]
        pair = user_settings.get(user_id, {}).get("pair")
        if not pair:
            await query.edit_message_text("–ü–æ–º–∏–ª–∫–∞: —Å–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å –≤–∞–ª—é—Ç–Ω—É –ø–∞—Ä—É.")
            return

        user_settings[user_id]["timeframe"] = tf
        await query.edit_message_text(f"ü§ñ –û–±—Ä–æ–±–ª—è—é —Å–∏–≥–Ω–∞–ª –¥–ª—è {pair} ({tf})...")

        ticker = yf.Ticker(pair + "=X")
        interval = timeframes[tf]

        try:
            df = await fetch_data_async(ticker, interval)

            if df.empty:
                await context.bot.send_message(chat_id=user_id, text=f"üìâ –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –∑–∞ –ø–∞—Ä—É {pair} –∑ —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–º {tf}. –°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à–∏–π —Ç–∞–π–º—Ñ—Ä–µ–π–º –∞–±–æ –ø–∞—Ä—É.")
                return

            signal_data = analyze_signal(df)
            if not signal_data or not signal_data["signal"]:
                await context.bot.send_message(chat_id=user_id, text=f"üìâ –°–∏–≥–Ω–∞–ª –≤—ñ–¥—Å—É—Ç–Ω—ñ–π –¥–ª—è {pair} ({tf}). –°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à–∏–π —Ç–∞–π–º—Ñ—Ä–µ–π–º –∞–±–æ –ø–∞—Ä—É.")
                return

            filename = generate_candlestick_chart(df, pair, tf)

            deadline = get_entry_deadline()

            text = (
                f"üìà –ü–∞—Ä–∞: {pair}\n"
                f"‚è±Ô∏è –¢–∞–π–º—Ñ—Ä–µ–π–º: {tf}\n"
                f"üìâ –°–∏–≥–Ω–∞–ª: {signal_data['signal']}\n"
                f"‚è≥ –ó–∞—Ö–æ–¥–∏—Ç–∏ –≤ —É–≥–æ–¥—É –¥–æ: {deadline}\n\n"
                f"üìã –ü–æ—è—Å–Ω–µ–Ω–Ω—è:\n"
                f"RSI: {signal_data['rsi']:.2f} (–ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω—ñ—Å—Ç—å <30 / –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω—ñ—Å—Ç—å >70)\n"
                f"EMA(9): {signal_data['ema']:.5f} (—Ç—Ä–µ–Ω–¥)\n"
                f"MACD: {signal_data['macd']:.5f} / {signal_data['macd_signal']:.5f} (–ø–µ—Ä–µ—Ç–∏–Ω –ª—ñ–Ω—ñ–π)\n"
                f"Stochastic: %K={signal_data['stoch_k']:.2f}, %D={signal_data['stoch_d']:.2f} (–ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω—ñ—Å—Ç—å/–ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω—ñ—Å—Ç—å)\n"
                f"Bollinger Bands: –≤–µ—Ä—Ö–Ω—è={signal_data['bb_upper']:.5f}, –Ω–∏–∂–Ω—è={signal_data['bb_lower']:.5f}\n"
                f"–¶—ñ–Ω–∞: {signal_data['price']:.5f}"
            )

            await context.bot.send_photo(chat_id=user_id, photo=open(filename, "rb"), caption=text)
            os.remove(filename)

            # –ó–∞–ø–∏—Å –≤ —ñ—Å—Ç–æ—Ä—ñ—é
            now = datetime.datetime.now(kyiv_tz)
            history.append({
                "timestamp": now.strftime("%Y-%m-%d %H:%M"),
                "pair": pair,
                "tf": tf,
                "signal": signal_data['signal']
            })

        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Å–∏–≥–Ω–∞–ª—É: {e}")
            await context.bot.send_message(chat_id=user_id, text="–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å–∏–≥–Ω–∞–ª—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")

# --- –û–±—Ä–æ–±–∫–∞ /history ---
async def history_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not history:
        await update.message.reply_text("–Ü—Å—Ç–æ—Ä—ñ—è —Å–∏–≥–Ω–∞–ª—ñ–≤ –ø–æ–∫–∏ —â–æ –ø–æ—Ä–æ–∂–Ω—è.")
    else:
        msg = "üìú –Ü—Å—Ç–æ—Ä—ñ—è —Å–∏–≥–Ω–∞–ª—ñ–≤:\n\n"
        for h in history[-10:]:
            msg += f"{h['timestamp']} | {h['pair']} ({h['tf']}) ‚Äî {h['signal']}\n"
        await update.message.reply_text(msg)

# --- –ó–∞–ø—É—Å–∫ ---
if __name__ == "__main__":
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("history", history_handler))
    app.add_handler(CallbackQueryHandler(button_handler))
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ")
    app.run_polling()
