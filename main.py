import os
import logging
import datetime
from threading import Thread

from flask import Flask

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
)

import yfinance as yf
import pandas as pd
import matplotlib.pyplot as plt
import mplfinance as mpf
import ta

# --- Flask –¥–ª—è –ø—ñ–Ω–≥—É (—â–æ–± Render —Ç—Ä–∏–º–∞–≤ —Å–µ—Ä–≤—ñ—Å –∂–∏–≤–∏–º) ---
app_web = Flask('')

@app_web.route('/')
def home():
    return "–ë–æ—Ç –ø—Ä–∞—Ü—é—î"

def run_flask():
    app_web.run(host='0.0.0.0', port=8080)

Thread(target=run_flask).start()

# --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—ñ–≤ ---
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)

# --- –î–∞–Ω—ñ –¥–ª—è –±–æ—Ç–∞ ---
TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    raise Exception("–í—ñ–¥—Å—É—Ç–Ω—ñ–π BOT_TOKEN —É –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è")

user_settings = {}  # –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –≤–∏–±—ñ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (pair, timeframe)
history = []  # –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—ñ—Ö —Å–∏–≥–Ω–∞–ª—ñ–≤

available_pairs = [
    "EURUSD", "GBPUSD", "USDJPY", "AUDUSD", "USDCHF", "EURJPY",
    "GBPJPY", "EURGBP", "NZDUSD", "USDCAD"
]

timeframes = {
    "1m": "1m",
    "3m": "3m",
    "5m": "5m"
}

# --- –§—É–Ω–∫—Ü—ñ—ó —Ç–µ—Ö–∞–Ω–∞–ª—ñ–∑—É ---

def calculate_macd(close):
    exp1 = close.ewm(span=12, adjust=False).mean()
    exp2 = close.ewm(span=26, adjust=False).mean()
    macd = exp1 - exp2
    signal = macd.ewm(span=9, adjust=False).mean()
    hist = macd - signal
    return macd, signal, hist

def calculate_stochastic(df, k_window=14, d_window=3):
    low_min = df['Low'].rolling(window=k_window).min()
    high_max = df['High'].rolling(window=k_window).max()
    k = 100 * ((df['Close'] - low_min) / (high_max - low_min))
    d = k.rolling(window=d_window).mean()
    return k, d

def analyze_signal(df: pd.DataFrame):
    if df.shape[0] < 30:
        return "–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É", None

    close = df['Close']
    rsi = ta.momentum.RSIIndicator(close, window=14).rsi()
    ema = ta.trend.EMAIndicator(close, window=9).ema_indicator()
    macd, macd_signal, _ = calculate_macd(close)
    stochastic_k, stochastic_d = calculate_stochastic(df)

    current_rsi = rsi.iloc[-1]
    current_ema = ema.iloc[-1]
    current_macd = macd.iloc[-1]
    current_macd_signal = macd_signal.iloc[-1]
    current_stochastic_k = stochastic_k.iloc[-1]
    current_stochastic_d = stochastic_d.iloc[-1]
    current_price = close.iloc[-1]

    bb = ta.volatility.BollingerBands(close, window=20, window_dev=2)
    upper_bb = bb.bollinger_hband().iloc[-1]
    lower_bb = bb.bollinger_lband().iloc[-1]

    signal = "–û—á—ñ–∫—É–π—Ç–µ"

    # –ü—Ä–æ—Å—Ç–∏–π –ø—Ä–∏–∫–ª–∞–¥ —Å–∏–≥–Ω–∞–ª—É –Ω–∞ –∫—É–ø—ñ–≤–ª—é
    if current_rsi < 30 and current_price < lower_bb and current_price > current_ema:
        signal = "üíö –ö—É–ø–∏—Ç–∏"
    # –ü—Ä–æ—Å—Ç–∏–π –ø—Ä–∏–∫–ª–∞–¥ —Å–∏–≥–Ω–∞–ª—É –Ω–∞ –ø—Ä–æ–¥–∞–∂
    elif current_rsi > 70 and current_price > upper_bb and current_price < current_ema:
        signal = "‚ù§Ô∏è –ü—Ä–æ–¥–∞—Ç–∏"

    info = {
        "RSI": current_rsi,
        "EMA": current_ema,
        "MACD": current_macd,
        "MACD_signal": current_macd_signal,
        "Stochastic_k": current_stochastic_k,
        "Stochastic_d": current_stochastic_d,
        "BB_upper": upper_bb,
        "BB_lower": lower_bb,
        "Price": current_price
    }

    return signal, info

# --- –§—É–Ω–∫—Ü—ñ—è –ø–æ–±—É–¥–æ–≤–∏ –≥—Ä–∞—Ñ—ñ–∫—É –∑ —è–ø–æ–Ω—Å—å–∫–∏–º–∏ —Å–≤—ñ—á–∫–∞–º–∏ —Ç–∞ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏ ---

def generate_candlestick_chart(df: pd.DataFrame, pair: str, tf: str):
    plt.rcParams.update({'figure.autolayout': True})
    mc = mpf.make_marketcolors(up='g', down='r', inherit=True)
    s = mpf.make_mpf_style(marketcolors=mc)

    # –î–æ–¥–∞—Ç–∫–æ–≤—ñ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏:
    # EMA9
    ema9 = ta.trend.EMAIndicator(df['Close'], window=9).ema_indicator()

    # Bollinger Bands
    bb = ta.volatility.BollingerBands(df['Close'], window=20, window_dev=2)
    upper_bb = bb.bollinger_hband()
    lower_bb = bb.bollinger_lband()

    addplots = [
        mpf.make_addplot(ema9, color='blue'),
        mpf.make_addplot(upper_bb, color='green', linestyle='--'),
        mpf.make_addplot(lower_bb, color='red', linestyle='--'),
    ]

    filename = f"{pair}_{tf}_chart.png"
    mpf.plot(df,
             type='candle',
             style=s,
             addplot=addplots,
             title=f"{pair} ({tf})",
             volume=False,
             savefig=filename)

    return filename

# --- –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–û—Ç—Ä–∏–º–∞—Ç–∏ —Å–∏–≥–Ω–∞–ª –≤—ñ–¥ –±–æ—Ç–∞", callback_data="mode_auto")],
        [InlineKeyboardButton("–û–±—Ä–∞—Ç–∏ –≤–∞–ª—é—Ç–Ω—É –ø–∞—Ä—É —Å–∞–º–æ–º—É", callback_data="mode_manual")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í–∏–±–µ—Ä—ñ—Ç—å —Ä–µ–∂–∏–º —Ä–æ–±–æ—Ç–∏ –±–æ—Ç–∞:", reply_markup=reply_markup)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    if query.data == "mode_auto":
        # –ë–æ—Ç –≤–∏–±–∏—Ä–∞—î –≤–∏–ø–∞–¥–∫–æ–≤—É –ø–∞—Ä—É —ñ —Ç–∞–π–º—Ñ—Ä–µ–π–º
        import random
        pair = random.choice(available_pairs)
        tf = random.choice(list(timeframes.keys()))
        user_settings[user_id] = {"pair": pair, "timeframe": tf}

        await query.edit_message_text(f"ü§ñ –ë–æ—Ç –≤–∏–±—Ä–∞–≤ –ø–∞—Ä—É {pair} —ñ —Ç–∞–π–º—Ñ—Ä–µ–π–º {tf}.\n–û—Ç—Ä–∏–º—É—é —Å–∏–≥–Ω–∞–ª...")

        await send_signal(user_id, pair, tf, context)

    elif query.data == "mode_manual":
        keyboard = [[InlineKeyboardButton(pair, callback_data=f"pair_{pair}")] for pair in available_pairs]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("–û–±–µ—Ä—ñ—Ç—å –≤–∞–ª—é—Ç–Ω—É –ø–∞—Ä—É:", reply_markup=reply_markup)

    elif query.data.startswith("pair_"):
        pair = query.data.split("_")[1]
        user_settings[user_id] = {"pair": pair}
        keyboard = [[InlineKeyboardButton(tf, callback_data=f"tf_{tf}")] for tf in timeframes]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(f"–û–±—Ä–∞–Ω–æ –ø–∞—Ä—É: {pair}\n–¢–µ–ø–µ—Ä –æ–±–µ—Ä—ñ—Ç—å —Ç–∞–π–º—Ñ—Ä–µ–π–º:", reply_markup=reply_markup)

    elif query.data.startswith("tf_"):
        tf = query.data.split("_")[1]
        pair = user_settings.get(user_id, {}).get("pair")
        if not pair:
            await query.edit_message_text("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: –ø–∞—Ä–∞ –Ω–µ –æ–±—Ä–∞–Ω–∞.")
            return
        user_settings[user_id]["timeframe"] = tf

        await query.edit_message_text(f"üìä –û—Ç—Ä–∏–º—É—é —Å–∏–≥–Ω–∞–ª –¥–ª—è {pair} ({tf})...")

        await send_signal(user_id, pair, tf, context)

async def send_signal(user_id, pair, tf, context):
    ticker = yf.Ticker(pair + "=X")

    now = datetime.datetime.utcnow()
    past = now - datetime.timedelta(minutes=100)  # –¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–ª—è 5m —Ç–∞–π–º—Ñ—Ä–µ–π–º—É

    # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é –∑ yfinance
    try:
        df = ticker.history(start=past, end=now, interval=tf)
    except Exception as e:
        await context.bot.send_message(chat_id=user_id, text=f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö: {e}")
        return

    if df.empty or df.shape[0] < 20:
        await context.bot.send_message(chat_id=user_id,
            text=f"üìâ –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –∑–∞ –ø–∞—Ä—É {pair} –∑ —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–º {tf}.\n–°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à–∏–π —Ç–∞–π–º—Ñ—Ä–µ–π–º –∞–±–æ –ø–∞—Ä—É.")
        return

    signal, info = analyze_signal(df)
    filename = generate_candlestick_chart(df, pair, tf)

    explanation = (
        f"üìà –ü–∞—Ä–∞: {pair}\n"
        f"‚è±Ô∏è –¢–∞–π–º—Ñ—Ä–µ–π–º: {tf}\n"
        f"üìâ –°–∏–≥–Ω–∞–ª: {signal}\n\n"
        f"üìã –ü–æ—è—Å–Ω–µ–Ω–Ω—è:\n"
        f"RSI: {info['RSI']:.2f} (–ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω—ñ—Å—Ç—å <30 / –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω—ñ—Å—Ç—å >70)\n"
        f"EMA(9): {info['EMA']:.5f} (—Ç—Ä–µ–Ω–¥)\n"
        f"MACD: {info['MACD']:.5f} / {info['MACD_signal']:.5f} (–ø–µ—Ä–µ—Ç–∏–Ω –ª—ñ–Ω—ñ–π)\n"
        f"Stochastic: %K={info['Stochastic_k']:.2f}, %D={info['Stochastic_d']:.2f} (–ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω—ñ—Å—Ç—å/–ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω—ñ—Å—Ç—å)\n"
        f"Bollinger Bands: –≤–µ—Ä—Ö–Ω—è={info['BB_upper']:.5f}, –Ω–∏–∂–Ω—è={info['BB_lower']:.5f}\n"
        f"–¶—ñ–Ω–∞: {info['Price']:.5f}"
    )

    history.append({
        "timestamp": now.strftime("%Y-%m-%d %H:%M"),
        "pair": pair,
        "tf": tf,
        "signal": signal
    })

    await context.bot.send_photo(chat_id=user_id, photo=open(filename, "rb"), caption=explanation)
    os.remove(filename)

async def history_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not history:
        await update.message.reply_text("–Ü—Å—Ç–æ—Ä—ñ—è —Å–∏–≥–Ω–∞–ª—ñ–≤ –ø–æ–∫–∏ —â–æ –ø–æ—Ä–æ–∂–Ω—è.")
        return

    msg = "üìú –Ü—Å—Ç–æ—Ä—ñ—è —Å–∏–≥–Ω–∞–ª—ñ–≤:\n\n"
    for h in history[-10:]:
        msg += f"{h['timestamp']} | {h['pair']} ({h['tf']}) ‚Äî {h['signal']}\n"
    await update.message.reply_text(msg)

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---

if __name__ == "__main__":
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("history", history_handler))
    app.add_handler(CallbackQueryHandler(button_handler))

    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ")
    app.run_polling()
