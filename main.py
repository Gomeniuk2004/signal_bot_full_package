import logging
import pytz
import datetime
import yfinance as yf
import pandas as pd
import matplotlib.pyplot as plt
import mplfinance as mpf
from ta.momentum import RSIIndicator, StochasticOscillator
from ta.trend import EMAIndicator, MACD
from telegram import Update, InputFile
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
import os
import asyncio

TOKEN = "8091244631:AAHZRqn2bY3Ow2zH2WNk0J92mar6D0MgfLw"
chat_id = 992940966  # –¢–≤—ñ–π —á–∞—Ç ID

logging.basicConfig(level=logging.INFO)

# –¢–∞–π–º—Ñ—Ä–µ–π–º —Ñ—ñ–∫—Å–æ–≤–∞–Ω–∏–π
interval = "5m"
limit = 100
kyiv_tz = pytz.timezone("Europe/Kyiv")


def is_market_open(symbol):
    try:
        data = yf.Ticker(symbol).history(period="1d")
        return not data.empty
    except Exception:
        return False


async def get_signal(pair: str):
    symbol = pair.replace("/", "") + "=X"

    if not is_market_open(symbol):
        return f"‚ùå –ü–∞—Ä–∞ {pair} –Ω–∞—Ä–∞–∑—ñ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —Ç–æ—Ä–≥—ñ–≤–ª—ñ."

    try:
        df = yf.download(symbol, interval=interval, period="1d", progress=False)
        if df.empty or len(df) < 20:
            return f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –¥–ª—è {pair}."

        df.dropna(inplace=True)
        close = df['Close']
        rsi = RSIIndicator(close).rsi()
        ema = EMAIndicator(close, window=9).ema_indicator()
        macd = MACD(close).macd_diff()
        stoch = StochasticOscillator(high=df['High'], low=df['Low'], close=close)
        bb_upper = close.rolling(20).mean() + close.rolling(20).std() * 2
        bb_lower = close.rolling(20).mean() - close.rolling(20).std() * 2

        latest = -1
        signal = None
        reason = []

        # –ü—Ä–æ—Å—Ç—ñ —Ñ—ñ–ª—å—Ç—Ä–∏ —Å–∏–≥–Ω–∞–ª—ñ–≤:
        if rsi.iloc[latest] < 35 and stoch.stoch_signal().iloc[latest] < 30 and macd.iloc[latest] > 0:
            signal = "–ö—É–ø–∏—Ç–∏"
            reason.append("RSI < 35, –°—Ç–æ—Ö–∞—Å—Ç—ñ–∫ < 30, MACD –ø–æ–∑–∏—Ç–∏–≤–Ω–∏–π")
        elif rsi.iloc[latest] > 65 and stoch.stoch_signal().iloc[latest] > 70 and macd.iloc[latest] < 0:
            signal = "–ü—Ä–æ–¥–∞—Ç–∏"
            reason.append("RSI > 65, –°—Ç–æ—Ö–∞—Å—Ç—ñ–∫ > 70, MACD –Ω–µ–≥–∞—Ç–∏–≤–Ω–∏–π")

        if not signal:
            return f"‚ùå –ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î —á—ñ—Ç–∫–∏—Ö —Å–∏–≥–Ω–∞–ª—ñ–≤ –Ω–∞ {interval}."

        # –ß–∞—Å –¥–æ —è–∫–æ–≥–æ –∑–∞—Ö–æ–¥–∏—Ç–∏ (–ö–∏—ó–≤)
        now_kyiv = datetime.datetime.now(kyiv_tz)
        exit_time = (now_kyiv + datetime.timedelta(minutes=5)).strftime('%H:%M')

        # –ü–æ–±—É–¥–æ–≤–∞ –≥—Ä–∞—Ñ—ñ–∫–∞
        plot_file = f"{pair.replace('/', '')}_plot.png"
        mpf.plot(df[-50:], type='candle', style='charles', title=f"{pair} ({interval})",
                 ylabel='–¶—ñ–Ω–∞', volume=False, savefig=plot_file)

        # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        text = (
            f"üìà –ü–∞—Ä–∞: {pair}\n"
            f"‚è±Ô∏è –¢–∞–π–º—Ñ—Ä–µ–π–º: {interval}\n"
            f"{'üü¢' if signal == '–ö—É–ø–∏—Ç–∏' else 'üî¥'} –°–∏–≥–Ω–∞–ª: {signal}\n\n"
            f"üìç –ó–∞—Ö–æ–¥–∏—Ç–∏ **–¥–æ {exit_time}** (–∑–∞ –ö–∏—î–≤–æ–º)\n"
            f"üìã –ü—Ä–∏—á–∏–Ω–∞: {reason[0]}"
        )

        return text, plot_file

    except Exception as e:
        return f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É {pair}: {e}"


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã –í—ñ—Ç–∞—é! –ù–∞–¥—Å–∏–ª–∞—é —Å–∏–≥–Ω–∞–ª...")

    # –í–∏–ø–∞–¥–∫–æ–≤–∞ –∞–∫—Ç–∏–≤–Ω–∞ –ø–∞—Ä–∞
    pairs = ["EUR/USD", "USD/JPY", "GBP/USD", "AUD/USD", "USD/CAD", "USD/CHF", "EUR/GBP"]
    for pair in pairs:
        result = await get_signal(pair)
        if isinstance(result, tuple):
            text, image = result
            await context.bot.send_photo(chat_id=update.effective_chat.id, photo=InputFile(image), caption=text)
            os.remove(image)
            return
        else:
            logging.info(f"{pair}: {result}")

    await update.message.reply_text("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ —Å–∏–≥–Ω–∞–ª –Ω–∞ –¥–∞–Ω–∏–π –º–æ–º–µ–Ω—Ç.")


if __name__ == "__main__":
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ.")
    app.run_polling()
