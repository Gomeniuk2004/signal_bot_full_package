import logging
import asyncio
from datetime import datetime, timedelta
import io

import yfinance as yf
import pandas as pd
import ta
import mplfinance as mpf
import matplotlib.pyplot as plt
import pytz

from telegram import Bot, InputMediaPhoto
from telegram.ext import ApplicationBuilder, ContextTypes, CommandHandler

# –¢–æ–∫–µ–Ω —ñ chat_id
TOKEN = "YOUR_TELEGRAM_BOT_TOKEN"
CHAT_ID = YOUR_CHAT_ID  # –¶—ñ–ª–µ —á–∏—Å–ª–æ

# –ü–∞—Ä–∞–º–µ—Ç—Ä–∏
TIMEFRAME = "5m"
TZ = pytz.timezone("Europe/Kiev")
PAIRS = [
    "EURUSD=X", "USDCHF=X", "GBPUSD=X", "AUDUSD=X", "USDCAD=X",
    "EURGBP=X", "EURJPY=X", "USDJPY=X", "AUDJPY=X", "EURCAD=X",
    "CHFJPY=X", "CADJPY=X", "GBPJPY=X", "EURCHF=X", "AUDCAD=X",
    "AUDCHF=X", "GBPCHF=X", "GBPCAD=X", "CADCHF=X", "GBPAUD=X"
]

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—ñ–≤
logging.basicConfig(
    format='%(asctime)s - %(levelname)s - %(message)s', level=logging.INFO
)

bot = Bot(token=TOKEN)

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —á–∏ –ø–∞—Ä–∞ –∞–∫—Ç–∏–≤–Ω–∞ (–º–∞—î —Å–≤—ñ–∂—ñ –¥–∞–Ω—ñ)
def is_pair_active(ticker: str) -> bool:
    try:
        df = yf.download(ticker, period="1d", interval=TIMEFRAME)
        if df.empty:
            return False
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –æ—Å—Ç–∞–Ω–Ω—è —Å–≤—ñ—á–∫–∞ –±–ª–∏–∑—å–∫–∞ –¥–æ –ø–æ—Ç–æ—á–Ω–æ–≥–æ —á–∞—Å—É
        last_time = df.index[-1].to_pydatetime()
        now = datetime.now(TZ)
        # –î–æ–∑–≤–æ–ª—è—î–º–æ –ª–∞–≥ –¥–æ 10 —Ö–≤
        if now - last_time < timedelta(minutes=10):
            return True
        return False
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ {ticker}: {e}")
        return False

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É —ñ –≤–∏–¥–∞—á—ñ —Å–∏–≥–Ω–∞–ª—É –∫—É–ø–∏—Ç–∏ –∞–±–æ –ø—Ä–æ–¥–∞—Ç–∏
def analyze_signal(df: pd.DataFrame) -> str | None:
    # –û–±—á–∏—Å–ª—é—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏
    df["EMA9"] = ta.trend.EMAIndicator(df["Close"], window=9).ema_indicator()
    df["EMA21"] = ta.trend.EMAIndicator(df["Close"], window=21).ema_indicator()
    df["RSI"] = ta.momentum.RSIIndicator(df["Close"], window=14).rsi()
    
    # –ü—Ä–æ—Å—Ç—ñ –ø—Ä–∞–≤–∏–ª–∞ (–∑–º—ñ–Ω—é–π –ø—ñ–¥ —Å–µ–±–µ):
    # –Ø–∫—â–æ EMA9 –ø–µ—Ä–µ—Ç–∏–Ω–∞—î EMA21 –∑–Ω–∏–∑—É –≤–≥–æ—Ä—É —ñ RSI < 70 -> –ö—É–ø–∏—Ç–∏
    # –Ø–∫—â–æ EMA9 –ø–µ—Ä–µ—Ç–∏–Ω–∞—î EMA21 –∑–≤–µ—Ä—Ö—É –≤–Ω–∏–∑ —ñ RSI > 30 -> –ü—Ä–æ–¥–∞—Ç–∏
    
    if len(df) < 22:
        return None
    
    ema9_current = df["EMA9"].iloc[-1]
    ema9_prev = df["EMA9"].iloc[-2]
    ema21_current = df["EMA21"].iloc[-1]
    ema21_prev = df["EMA21"].iloc[-2]
    rsi_current = df["RSI"].iloc[-1]
    
    # –ü–µ—Ä–µ—Ç–∏–Ω –∑–Ω–∏–∑—É –≤–≥–æ—Ä—É
    if ema9_prev < ema21_prev and ema9_current > ema21_current and rsi_current < 70:
        return "–ö—É–ø–∏—Ç–∏"
    # –ü–µ—Ä–µ—Ç–∏–Ω –∑–≤–µ—Ä—Ö—É –≤–Ω–∏–∑
    elif ema9_prev > ema21_prev and ema9_current < ema21_current and rsi_current > 30:
        return "–ü—Ä–æ–¥–∞—Ç–∏"
    
    return None

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –≥—Ä–∞—Ñ—ñ–∫–∞ –∑ –ø–æ–∑–Ω–∞—á–∫–æ—é —Å–∏–≥–Ω–∞–ª—É
def generate_chart(df: pd.DataFrame, signal: str, pair: str) -> io.BytesIO:
    # –ü—ñ–¥–ø–∏—Å —ñ –∫–æ–ª—ñ—Ä —Å—Ç—Ä—ñ–ª–∫–∏
    color = "green" if signal == "–ö—É–ø–∏—Ç–∏" else "red"
    arrow_text = signal
    
    apdict = mpf.make_addplot(df["EMA9"], color="blue")
    fig, axlist = mpf.plot(
        df,
        type='candle',
        style='charles',
        addplot=apdict,
        returnfig=True,
        figsize=(8, 5),
        title=f"{pair} - –°–∏–≥–Ω–∞–ª: {signal}",
        datetime_format="%H:%M",
        xrotation=20
    )
    
    ax = axlist[0]
    # –°—Ç—Ä—ñ–ª–∫–∞ –Ω–∞ –æ—Å—Ç–∞–Ω–Ω—ñ–π —Å–≤—ñ—á—Ü—ñ
    last_idx = len(df) - 1
    last_close = df["Close"].iloc[-1]
    ax.annotate(
        arrow_text,
        xy=(last_idx, last_close),
        xytext=(last_idx, last_close * (1.01 if signal == "–ö—É–ø–∏—Ç–∏" else 0.99)),
        arrowprops=dict(facecolor=color, shrink=0.1, width=2, headwidth=8),
        color=color,
        fontsize=12,
        fontweight='bold'
    )
    
    buf = io.BytesIO()
    fig.savefig(buf, format='png')
    plt.close(fig)
    buf.seek(0)
    return buf

async def send_signal(context: ContextTypes.DEFAULT_TYPE, pair: str, signal: str):
    now = datetime.now(TZ)
    # –§–æ—Ä–º—É—î–º–æ —á–∞—Å –¥–æ —è–∫–æ–≥–æ –≤—Ö–æ–¥–∏—Ç–∏ (5 —Ö–≤ –≤—ñ–¥ –ø–æ—Ç–æ—á–Ω–æ–≥–æ 5m —Ç–∞–π–º—Ñ—Ä–µ–π–º—É)
    enter_until = now + timedelta(minutes=5)
    time_str = enter_until.strftime("%H:%M")
    
    msg = (
        f"üìà –ü–∞—Ä–∞: {pair.replace('=X','')}\n"
        f"‚è± –¢–∞–π–º—Ñ—Ä–µ–π–º: 5m\n"
        f"üìâ –°–∏–≥–Ω–∞–ª: {signal}\n\n"
        f"‚è≥ –í—Ö—ñ–¥ –¥–æ: {time_str}\n"
    )
    
    df = yf.download(pair, period="2d", interval=TIMEFRAME)
    chart_buf = generate_chart(df, signal, pair.replace('=X',''))
    
    await context.bot.send_photo(chat_id=CHAT_ID, photo=chart_buf, caption=msg)

async def find_and_send_signals(context: ContextTypes.DEFAULT_TYPE):
    while True:
        for pair in PAIRS:
            if not is_pair_active(pair):
                logging.info(f"–ü–∞—Ä–∞ {pair} –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ.")
                continue
            df = yf.download(pair, period="2d", interval=TIMEFRAME)
            signal = analyze_signal(df)
            if signal:
                logging.info(f"–ó–Ω–∞–π–¥–µ–Ω–æ —Å–∏–≥–Ω–∞–ª {signal} –¥–ª—è {pair}")
                await send_signal(context, pair, signal)
                await asyncio.sleep(300)  # —á–µ–∫–∞—î–º–æ 5 —Ö–≤ –ø–æ–∫–∏ —Å–∏–≥–Ω–∞–ª –∞–∫—Ç–∏–≤–Ω–∏–π
                break  # –ø—ñ—Å–ª—è —Å–∏–≥–Ω–∞–ª—É –∑—É–ø–∏–Ω—è—î–º–æ —Ü–∏–∫–ª —â–æ–± –Ω–µ —Å–ø–∞–º–∏—Ç–∏
        else:
            logging.info("–ü–æ–∫–∏ —â–æ —Å–∏–≥–Ω–∞–ª—ñ–≤ –Ω–µ–º–∞—î, –ø–æ–≤—Ç–æ—Ä—é—î–º–æ —Å–ø—Ä–æ–±—É —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...")
            await asyncio.sleep(10)

async def start(update, context):
    await update.message.reply_text("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ. –®—É–∫–∞—î–º–æ —Å–∏–≥–Ω–∞–ª–∏...")

def main():
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ç–∞—Å–∫—É –ø–æ—à—É–∫—É —Å–∏–≥–Ω–∞–ª—ñ–≤
    app.job_queue.run_once(lambda ctx: asyncio.create_task(find_and_send_signals(ctx)), 1)
    
    app.run_polling()

if __name__ == "__main__":
    main()
