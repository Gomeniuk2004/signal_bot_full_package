# -*- coding: utf-8 -*-

import asyncio
import logging
import yfinance as yf
import nest_asyncio
import datetime

from telegram import Update, Bot, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
)

# ‚ö†Ô∏è BOT TOKEN (–∑–∞–º—ñ–Ω–∏ –ø—ñ—Å–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è!)
TOKEN = "8091244631:AAHZRqn2bY3Ow2zH2WNk0J92mar6D0MgfLw"

# –í–∞–ª—é—Ç–Ω—ñ –ø–∞—Ä–∏
SYMBOLS = [
    "EURUSD=X", "GBPUSD=X", "USDJPY=X", "EURJPY=X", "GBPJPY=X",
    "AUDUSD=X", "USDCAD=X", "USDCHF=X", "EURGBP=X", "AUDJPY=X",
    "EURCAD=X", "NZDUSD=X", "GBPCAD=X", "USDNOK=X", "USDSEK=X",
    "USDTRY=X", "EURTRY=X", "USDRUB=X", "EURRUB=X"
]

INTERVAL = "5m"
subscribers = set()

# –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

# –ú–µ–Ω—é-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞
keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton("‚úÖ –°—Ç–∞—Ä—Ç"), KeyboardButton("‚ùå –°—Ç–æ–ø")],
        [KeyboardButton("üìà –Ü—Å—Ç–æ—Ä—ñ—è —É–≥–æ–¥")]
    ],
    resize_keyboard=True
)

# –ö–æ–º–∞–Ω–¥–∏
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat.id
    subscribers.add(chat)
    await update.message.reply_text("‚úÖ –í–∏ –ø—ñ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Å–∏–≥–Ω–∞–ª–∏.", reply_markup=keyboard)

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("""
üõ† –ö–æ–º–∞–Ω–¥–∏:
/start ‚Äì —É–≤—ñ–º–∫–Ω—É—Ç–∏ —Å–∏–≥–Ω–∞–ª–∏
/stop ‚Äì –≤–∏–º–∫–Ω—É—Ç–∏ —Å–∏–≥–Ω–∞–ª–∏
/help ‚Äì –¥–æ–≤—ñ–¥–∫–∞
–ê–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂—á–µ.
""", reply_markup=keyboard)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    chat = update.effective_chat.id

    if text == "‚úÖ –°—Ç–∞—Ä—Ç":
        subscribers.add(chat)
        await update.message.reply_text("üîî –°–∏–≥–Ω–∞–ª–∏ —É–≤—ñ–º–∫–Ω–µ–Ω–æ.", reply_markup=keyboard)

    elif text == "‚ùå –°—Ç–æ–ø":
        subscribers.discard(chat)
        await update.message.reply_text("üîï –°–∏–≥–Ω–∞–ª–∏ –≤–∏–º–∫–Ω–µ–Ω–æ.", reply_markup=keyboard)

    elif text == "üìà –Ü—Å—Ç–æ—Ä—ñ—è —É–≥–æ–¥":
        await update.message.reply_text("üìä –Ü—Å—Ç–æ—Ä—ñ—è —É–≥–æ–¥ –ø–æ–∫–∏ –Ω–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞.", reply_markup=keyboard)

    else:
        await update.message.reply_text("‚ùì –ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è. –°–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏.", reply_markup=keyboard)

# –ê–Ω–∞–ª—ñ–∑
async def analyze(symbol):
    data = yf.download(tickers=symbol, period="1d", interval=INTERVAL)
    if data.empty:
        return None

    close = data["Close"]
    ema = close.ewm(span=14).mean().iloc[-1]
    delta = close.diff().dropna()
    up = delta.clip(lower=0).mean()
    down = -delta.clip(upper=0).mean()
    rsi = 100 - 100 / (1 + up / down) if down != 0 else None
    last = close.iloc[-1]
    signal = "–ö—É–ø–∏—Ç–∏" if last > ema else "–ü—Ä–æ–¥–∞—Ç–∏"
    return symbol.replace("=X", ""), signal, round(last, 5), round(ema, 5), round(rsi, 2) if rsi else None

# –°–∏–≥–Ω–∞–ª–∏
async def send_signals(bot: Bot):
    while True:
        if not subscribers:
            await asyncio.sleep(60)
            continue

        for sym in SYMBOLS:
            try:
                res = await analyze(sym)
                if res:
                    pair, sig, last, ema, rsi = res
                    now = datetime.datetime.now()
                    expiry = (now + datetime.timedelta(minutes=5)).strftime("%H:%M")
                    msg = f"üìâ <b>{pair}</b>\n–°–∏–≥–Ω–∞–ª: {sig}\n–¶—ñ–Ω–∞: {last}\nEMA14: {ema}"
                    if rsi:
                        msg += f"\nRSI: {rsi}"
                    msg += f"\n‚è≥ –£–≥–æ–¥–∞ –¥–æ: <b>{expiry}</b>"

                    for chat in subscribers:
                        await bot.send_message(chat_id=chat, text=msg, parse_mode="HTML")

            except Exception as e:
                logging.warning(f"–ü–æ–º–∏–ª–∫–∞ –∑ {sym}: {e}")

            await asyncio.sleep(1)

        await asyncio.sleep(300)  # —á–µ–∫–∞—Ç–∏ 5 —Ö–≤

# –ó–∞–ø—É—Å–∫
async def main():
    nest_asyncio.apply()
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    asyncio.create_task(send_signals(app.bot))
    await app.run_polling()

if __name__ == "__main__":
    asyncio.run(main())
