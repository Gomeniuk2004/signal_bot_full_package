import logging
import asyncio
import datetime
import pytz
import yfinance as yf
import pandas as pd
import ta
import matplotlib.pyplot as plt
import mplfinance as mpf
from io import BytesIO
from telegram import Bot
from telegram.error import TelegramError

# –¢–æ–∫–µ–Ω —ñ —á–∞—Ç –∞–π–¥—ñ
TOKEN = "8091244631:AAHZRqn2bY3Ow2zH2WNk0J92mar6D0MgfLw"
CHAT_ID = 992940966

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—ñ–≤
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –¢–∞–π–º—Ñ—Ä–µ–π–º 5 —Ö–≤
TIMEFRAME = '5m'

# –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –ø–∞—Ä, —è–∫—ñ –∞–Ω–∞–ª—ñ–∑—É—î–º–æ (—Ç—Ä–µ–±–∞ —É —Ñ–æ—Ä–º–∞—Ç—ñ Yahoo Finance, —Ç–æ–±—Ç–æ –±–µ–∑ "/")
PAIRS = [
    "EURAUD", "CHFJPY", "EURUSD", "CADJPY", "GBPJPY", "EURCAD", "AUDUSD", "EURCHF",
    "EURGBP", "EURJPY", "USDCAD", "AUDCAD", "AUDJPY", "USDJPY", "AUDCHF", "GBPUSD",
    "GBPCHF", "GBPCAD", "CADCHF", "GBPAUD", "USDCHF"
]

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —á–∏ –ø–∞—Ä–∞ –∞–∫—Ç–∏–≤–Ω–∞ (—î –¥–∞–Ω—ñ –Ω–∞ Yahoo Finance)
def is_pair_active(ticker: str) -> bool:
    try:
        data = yf.Ticker(ticker + "=X").history(period="1d", interval=TIMEFRAME)
        return not data.empty
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –ø–∞—Ä–∏ {ticker}: {e}")
        return False

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–≤—ñ–∂–∏—Ö –¥–∞–Ω–∏—Ö —ñ —Å–∏–≥–Ω–∞–ª—ñ–≤
def get_signal(ticker: str):
    try:
        df = yf.Ticker(ticker + "=X").history(period="1d", interval=TIMEFRAME)
        if df.empty or len(df) < 20:
            return None, None

        # –û–±—á–∏—Å–ª–µ–Ω–Ω—è —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä—ñ–≤
        df['RSI'] = ta.momentum.RSIIndicator(df['Close']).rsi()
        df['EMA9'] = df['Close'].ewm(span=9, adjust=False).mean()
        macd = ta.trend.MACD(df['Close'])
        df['MACD'] = macd.macd()
        df['MACD_signal'] = macd.macd_signal()

        # –ê–Ω–∞–ª—ñ–∑ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –±–∞—Ä—É
        last = df.iloc[-1]
        prev = df.iloc[-2]

        # –ü—Ä–æ—Å—Ç–∏–π —Å–∏–≥–Ω–∞–ª: –∫—É–ø–∏—Ç–∏, —è–∫—â–æ MACD –ø–µ—Ä–µ—Ç–∏–Ω–∞—î —Å–∏–≥–Ω–∞–ª –∑–Ω–∏–∑—É –≤–≤–µ—Ä—Ö
        if (prev['MACD'] < prev['MACD_signal']) and (last['MACD'] > last['MACD_signal']):
            return "–ö—É–ø–∏—Ç–∏", df
        # –ü—Ä–æ–¥–∞—Ç–∏, —è–∫—â–æ MACD –ø–µ—Ä–µ—Ç–∏–Ω–∞—î —Å–∏–≥–Ω–∞–ª –∑–≤–µ—Ä—Ö—É –≤–Ω–∏–∑
        elif (prev['MACD'] > prev['MACD_signal']) and (last['MACD'] < last['MACD_signal']):
            return "–ü—Ä–æ–¥–∞—Ç–∏", df
        else:
            return None, df
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å–∏–≥–Ω–∞–ª—É –¥–ª—è {ticker}: {e}")
        return None, None

# –§—É–Ω–∫—Ü—ñ—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫—É —ñ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è —É –±–∞–π—Ç–∞—Ö
def plot_chart(df, ticker, signal):
    try:
        # –î–æ–¥–∞—Ç–∫–æ–≤–æ –º–æ–∂–Ω–∞ —Å—Ç–∏–ª—ñ–∑—É–≤–∞—Ç–∏
        apds = [mpf.make_addplot(df['EMA9'], color='blue'),
                mpf.make_addplot(df['RSI'], panel=1, color='orange')]
        fig, axlist = mpf.plot(df, type='candle', addplot=apds,
                               title=f"{ticker} - –°–∏–≥–Ω–∞–ª: {signal}",
                               style='yahoo', returnfig=True,
                               figsize=(8, 6))
        buf = BytesIO()
        fig.savefig(buf, format='png')
        plt.close(fig)
        buf.seek(0)
        return buf
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ–±—É–¥–æ–≤—ñ –≥—Ä–∞—Ñ—ñ–∫—É: {e}")
        return None

async def main():
    bot = Bot(token=TOKEN)

    while True:
        found_signal = False
        for pair in PAIRS:
            if not is_pair_active(pair):
                continue

            signal, df = get_signal(pair)
            if signal:
                chart = plot_chart(df, pair, signal)
                now = datetime.datetime.now(pytz.timezone("Europe/Kiev"))
                text = f"üìà –ü–∞—Ä–∞: {pair}\n‚è∞ –ß–∞—Å: {now.strftime('%Y-%m-%d %H:%M:%S')}\nüìä –°–∏–≥–Ω–∞–ª: {signal}"
                try:
                    if chart:
                        await bot.send_photo(chat_id=CHAT_ID, photo=chart, caption=text)
                    else:
                        await bot.send_message(chat_id=CHAT_ID, text=text)
                except TelegramError as e:
                    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
                found_signal = True
                break  # –ù–∞–¥—ñ—Å–ª–∞–ª–∏ —Å–∏–≥–Ω–∞–ª ‚Äî –º–æ–∂–Ω–∞ —á–µ–∫–∞—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ü–∏–∫–ª—É

        if not found_signal:
            logger.info("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Å–∏–≥–Ω–∞–ª—ñ–≤. –ß–µ–∫–∞—î–º–æ 10 —Å–µ–∫—É–Ω–¥...")
            await asyncio.sleep(10)
        else:
            logger.info("–°–∏–≥–Ω–∞–ª –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ. –ß–µ–∫–∞—î–º–æ 5 —Ö–≤–∏–ª–∏–Ω...")
            await asyncio.sleep(300)  # –ß–µ–∫–∞—î–º–æ 5 —Ö–≤–∏–ª–∏–Ω –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–∏–º –ø–æ—à—É–∫–æ–º

if __name__ == "__main__":
    asyncio.run(main())
